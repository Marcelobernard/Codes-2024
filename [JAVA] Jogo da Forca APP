package estacio.jdf;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.geometry.Pos;



public class jdf extends Application {
    private boolean respostaCorreta = false;
    private String palavra = "carro"; // Palavra que será mostrada
    private Label palavraLabel;

    public void start(Stage primaryStage) {
        VBox root = new VBox();

        // Adiciona a imagem abaixo da palavra
        ImageView imageView = new ImageView();
        HBox caixaImagem = new HBox(imageView);
        caixaImagem.setAlignment(Pos.CENTER); // Centraliza a imagem horizontalmente
        try {
            Image imagem = new Image("C:\\Users\\202209294361\\IdeaProjects\\jdf\\boneco.png");
            imageView.setImage(imagem);
            imageView.setFitWidth(300);
            imageView.setFitHeight(400);
        } catch (IllegalArgumentException e) {
            System.err.println("Erro ao carregar a imagem: " + e.getMessage());
        }
        root.getChildren().add(caixaImagem);

        // Adiciona a palavra ao topo
        palavraLabel = new Label(getPalavraEscondida(""));
        palavraLabel.setStyle("-fx-font-size: 100px;"); // Define o tamanho da fonte como 24 pixels
        HBox caixaPalavra = new HBox(palavraLabel);
        caixaPalavra.setAlignment(Pos.CENTER); // Centraliza a palavra horizontalmente
        root.getChildren().add(caixaPalavra);

        // Adiciona os botões abaixo da imagem
        GridPane painelBotoes = new GridPane();
        painelBotoes.setPadding(new Insets(10));
        painelBotoes.setHgap(5);
        painelBotoes.setVgap(5);

        int col = 0;
        int row = 0;
        for (char c = 'A'; c <= 'Z'; c++) {
            Button botao = new Button(String.valueOf(c));
            botao.setPrefSize(40, 40);
            botao.setOnAction(e -> {
                if (verificarResposta()) {
                    botao.setStyle("-fx-background-color: green;");
                    botao.setDisable(true);
                    String letrasCorretas = palavraLabel.getText().replaceAll("\\s", ""); // Obtém letras corretas do texto atual
                    palavraLabel.setText(getPalavraEscondida(letrasCorretas)); // Atualiza a palavra exibida
                } else {
                    botao.setStyle("-fx-background-color: red;");
                }
            });
            painelBotoes.add(botao, col, row);
            col++;
            if (col > 12) {
                col = 0;
                row++;
            }
        }

        HBox caixaBotoes = new HBox(painelBotoes);
        caixaBotoes.setAlignment(Pos.CENTER); // Centraliza os botões horizontalmente
        root.getChildren().add(caixaBotoes);

        Scene cena = new Scene(root, 600, 620);

        primaryStage.setScene(cena);
        root.setStyle("-fx-background-color: white;");
        primaryStage.setTitle("Jogo da Forca");
        primaryStage.setResizable(false);

        primaryStage.show();
    }

    private boolean verificarResposta() {
        respostaCorreta = !respostaCorreta;
        return respostaCorreta;
    }

    private String getPalavraEscondida(String letrasCorretas) {
        StringBuilder palavraEscondida = new StringBuilder();
        for (int i = 0; i < palavra.length(); i++) {
            char letra = palavra.charAt(i);
            if (letrasCorretas.contains(String.valueOf(letra))) {
                palavraEscondida.append(letra).append(" ");
            } else {
                palavraEscondida.append("_ ");
            }
        }
        return palavraEscondida.toString();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
